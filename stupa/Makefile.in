#================================================================
# Setting Variables
#================================================================

# Generic settings
SHELL = @SHELL@
VALGRIND=valgrind --tool=memcheck --log-fd=1

# Package information
PACKAGE = @PACKAGE_NAME@
VERSION = @PACKAGE_VERSION@
PACKAGEDIR = $(PACKAGE)-$(VERSION)
PACKAGETGZ = $(PACKAGE)-$(VERSION).tar.gz
LIBVER = @MYLIBVER@
LIBREV = @MYLIBREV@
FORMATVER = @MYFORMATVER@

# Targets
HEADERFILES = @MYHEADERFILES@
LIBRARYFILES = @MYLIBRARYFILES@
LIBOBJFILES = @MYLIBOBJFILES@
COMMANDFILES = @MYCOMMANDFILES@
TESTCOMMANDFILES = @MYTESTCOMMANDFILES@
DOCUMENTFILES = @MYDOCUMENTFILES@

# Install destinations
prefix = @prefix@
exec_prefix = @exec_prefix@
INCLUDEDIR = @includedir@/stupa
LIBDIR = @libdir@
BINDIR = @bindir@
DESTDIR =

# Building configuration
CC = @CXX@
CPPFLAGS = @MYCPPFLAGS@
CFLAGS = @MYCFLAGS@
LDFLAGS = @MYLDFLAGS@
TESTLDFLAGS = @MYTESTLDFLAGS@
CMDLDFLAGS = @MYCMDLDFLAGS@
LIBS = @LIBS@
LDENV = LD_RUN_PATH=.:/lib:/usr/lib:$(LIBDIR):$(HOME)/lib:/usr/local/lib:@MYRUNPATH@
RUNENV = @MYLDLIBPATHENV@=.:/lib:/usr/lib:$(LIBDIR):$(HOME)/lib:/usr/local/lib:@MYRUNPATH@
DEFS = @DEFS@


#================================================================
# Suffix rules
#================================================================

.SUFFIXES :
.SUFFIXES : .cc .o

.cc.o :
	$(CC) -c $(CPPFLAGS) $(DEFS) $(CFLAGS) $<


#================================================================
# Actions
#================================================================

all : $(LIBRARYFILES) $(COMMANDFILES)

test : $(TESTCOMMANDFILES)
	make check

check : $(TESTCOMMANDFILES)
	$(RUNENV) $(RUNCMD) ./utiltest
	$(RUNENV) $(RUNCMD) ./postest
	$(RUNENV) $(RUNCMD) ./bsettest
	$(RUNENV) $(RUNCMD) ./invtest
	$(RUNENV) $(RUNCMD) ./bssrchtest
	@printf '\n'
	@printf '#================================================================\n'
	@printf '# Checking completed.\n'
	@printf '#================================================================\n'

check-valgrind : $(COMMANDFILES)
	make RUNCMD="$(VALGRIND)" check > leak.log
	$(VALGRIND) echo "Alex" | ./stpctl search data/test1.tsv >> leak.log
	$(VALGRIND) echo "Alex	Sam" | ./stpctl search data/test1.tsv >> leak.log
	$(VALGRIND) echo "Rock" | ./stpctl search -f data/test1.tsv >> leak.log
	$(VALGRIND) echo "Rock	Pop" | ./stpctl search -f data/test1.tsv >> leak.log
	$(VALGRIND) ./stpctl save data/test1.tsv valgrind_saved.tmp 100 >> leak.log
	$(VALGRIND) echo "Alex" | ./stpctl search -b valgrind_saved.tmp >> leak.log
	$(VALGRIND) echo "Rock" | ./stpctl search -b -f valgrind_saved.tmp >> leak.log
	$(VALGRIND) ./stprand 100 20 2 100 >> leak.log
	$(VALGRIND) ./stprand -text 100 20 2 100 >> leak.log
	grep ERROR leak.log
	grep 'at exit' leak.log
	rm valgrind_saved.tmp

clean :
	rm -rf $(LIBRARYFILES) $(LIBOBJFILES) $(TESTCOMMANDFILES) $(COMMANDFILES) \
	  *.o *~ a.out gmon.out leak.log

untabify :
	ls *.cc *.h | while read name ; \
	  do \
	    sed -e 's/\t/        /g' -e 's/ *$$//' $$name > $$name~; \
	    [ -f $$name~ ] && mv -f $$name~ $$name ; \
	  done

install :
	mkdir -p $(DESTDIR)$(INCLUDEDIR)
	cp -Rf $(HEADERFILES) $(DESTDIR)$(INCLUDEDIR)
	mkdir -p $(DESTDIR)$(LIBDIR)
	cp -Rf $(LIBRARYFILES) $(DESTDIR)$(LIBDIR)
	mkdir -p $(DESTDIR)$(BINDIR)
	cp -Rf $(COMMANDFILES) $(DESTDIR)$(BINDIR)

uninstall :
	cd $(DESTDIR)$(INCLUDEDIR) && rm -f $(HEADERFILES)
	cd $(DESTDIR)$(LIBDIR) && rm -f $(LIBRARYFILES)
	cd $(DESTDIR)$(BINDIR) && rm -f $(COMMANDFILES)

dist :
	make distclean
	rm -rf .svn; rm -rf data/.svn
	cd .. && tar cvf - $(PACKAGEDIR) | gzip -c > $(PACKAGETGZ)
	sync ; sync

distclean : clean
	rm -rf Makefile config.cache config.h config.log config.status autom4te.cache

.PHONY : all clean install check


#================================================================
# Building binaries
#================================================================

libstupa.a : $(LIBOBJFILES)
	$(AR) $(ARFLAGS) $@ $(LIBOBJFILES)

libstupa.so.$(LIBVER).$(LIBREV).0 : $(LIBOBJFILES)
	if uname -a | egrep -i 'SunOS' > /dev/null ; \
	  then \
	    $(CC) $(CFLAGS) -shared -Wl,-G,-h,libstupa.so.$(LIBVER) -o $@ \
	      $(LIBOBJFILES) $(LDFLAGS) $(LIBS) ; \
	  else \
	    $(CC) $(CFLAGS) -shared -Wl,-soname,libstupa.so.$(LIBVER) -o $@ \
	      $(LIBOBJFILES) $(LDFLAGS) $(LIBS) ; \
	  fi

libstupa.so.$(LIBVER) : libstupa.so.$(LIBVER).$(LIBREV).0
	ln -f -s libstupa.so.$(LIBVER).$(LIBREV).0 $@

libstupa.so : libstupa.so.$(LIBVER).$(LIBREV).0
	ln -f -s libstupa.so.$(LIBVER).$(LIBREV).0 $@

libstupa.$(LIBVER).$(LIBREV).0.dylib : $(LIBOBJFILES)
	$(CC) $(CFLAGS) -dynamiclib -o $@ \
	  -install_name $(LIBDIR)/libstupa.$(LIBVER).dylib \
	  -current_version $(LIBVER).$(LIBREV).0 -compatibility_version $(LIBVER) \
	  $(LIBOBJFILES) $(LDFLAGS) $(LIBS)

libstupa.$(LIBVER).dylib : libstupa.$(LIBVER).$(LIBREV).0.dylib
	ln -f -s libstupa.$(LIBVER).$(LIBREV).0.dylib $@

libstupa.dylib : libstupa.$(LIBVER).$(LIBREV).0.dylib
	ln -f -s libstupa.$(LIBVER).$(LIBREV).0.dylib $@

stpctl : stpctl.o $(LIBRARYFILES)
	$(LDENV) $(CC) $(CFLAGS) -o $@ $< $(LDFLAGS) $(CMDLDFLAGS) -lstupa $(LIBS)

stprand : stprand.o $(LIBRARYFILES)
	$(LDENV) $(CC) $(CFLAGS) -o $@ $< $(LDFLAGS) $(CMDLDFLAGS) -lstupa $(LIBS)

utiltest : utiltest.o $(LIBRARYFILES)
	$(LDENV) $(CC) $(CFLAGS) -o $@ $< $(LDFLAGS) $(TESTLDFLAGS) -lstupa $(LIBS)

postest : postest.o $(LIBRARYFILES)
	$(LDENV) $(CC) $(CFLAGS) -o $@ $< $(LDFLAGS) $(TESTLDFLAGS) -lstupa $(LIBS)

bsettest : bsettest.o $(LIBRARYFILES)
	$(LDENV) $(CC) $(CFLAGS) -o $@ $< $(LDFLAGS) $(TESTLDFLAGS) -lstupa $(LIBS)

invtest : invtest.o $(LIBRARYFILES)
	$(LDENV) $(CC) $(CFLAGS) -o $@ $< $(LDFLAGS) $(TESTLDFLAGS) -lstupa $(LIBS)

bssrchtest : bssrchtest.o $(LIBRARYFILES)
	$(LDENV) $(CC) $(CFLAGS) -o $@ $< $(LDFLAGS) $(TESTLDFLAGS) -lstupa $(LIBS)

stpctl.o : bayesian_sets.h inverted_index.h config.h util.h

stprand.o : bayesian_sets.h inverted_index.h config.h util.h

bayesian_sets.o : bayesian_sets.h config.h util.h

inverted_index.o : bayesian_sets.h inverted_index.h posting_list.h config.h util.h

posting_list.o : bayesian_sets.h posting_list.h config.h util.h

bssearch.o : bayesian_sets.h inverted_index.h posting_list.h bssearch.h config.h util.h

utiltest.o : config.h util.h

postest.o : posting_list.h config.h util.h

bsettest.o : bayesian_sets.h config.h util.h

invtest.o : bayesian_sets.h inverted_index.h posting_list.h config.h util.h

bssrchtest.o : bayesian_sets.h inverted_index.h posting_list.h bssearch.h config.h util.h

util.o : config.h util.h

# END OF FILE
