/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef Search_H
#define Search_H

#include <TProcessor.h>
#include "stupa_types.h"

namespace stupa { namespace thrift {

class SearchIf {
 public:
  virtual ~SearchIf() {}
  virtual void add_document(const std::string& document_id, const std::vector<std::string> & features) = 0;
  virtual void delete_document(const std::string& document_id) = 0;
  virtual int64_t size() = 0;
  virtual void clear() = 0;
  virtual void search_by_document(std::vector<SearchResult> & _return, const int64_t max, const std::vector<std::string> & query) = 0;
  virtual void search_by_feature(std::vector<SearchResult> & _return, const int64_t max, const std::vector<std::string> & query) = 0;
  virtual bool save(const std::string& filename) = 0;
  virtual bool load(const std::string& filename) = 0;
};

class SearchNull : virtual public SearchIf {
 public:
  virtual ~SearchNull() {}
  void add_document(const std::string& /* document_id */, const std::vector<std::string> & /* features */) {
    return;
  }
  void delete_document(const std::string& /* document_id */) {
    return;
  }
  int64_t size() {
    int64_t _return = 0;
    return _return;
  }
  void clear() {
    return;
  }
  void search_by_document(std::vector<SearchResult> & /* _return */, const int64_t /* max */, const std::vector<std::string> & /* query */) {
    return;
  }
  void search_by_feature(std::vector<SearchResult> & /* _return */, const int64_t /* max */, const std::vector<std::string> & /* query */) {
    return;
  }
  bool save(const std::string& /* filename */) {
    bool _return = false;
    return _return;
  }
  bool load(const std::string& /* filename */) {
    bool _return = false;
    return _return;
  }
};

class Search_add_document_args {
 public:

  Search_add_document_args() : document_id("") {
  }

  virtual ~Search_add_document_args() throw() {}

  std::string document_id;
  std::vector<std::string>  features;

  struct __isset {
    __isset() : document_id(false), features(false) {}
    bool document_id;
    bool features;
  } __isset;

  bool operator == (const Search_add_document_args & rhs) const
  {
    if (!(document_id == rhs.document_id))
      return false;
    if (!(features == rhs.features))
      return false;
    return true;
  }
  bool operator != (const Search_add_document_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_add_document_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_add_document_pargs {
 public:


  virtual ~Search_add_document_pargs() throw() {}

  const std::string* document_id;
  const std::vector<std::string> * features;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_add_document_result {
 public:

  Search_add_document_result() {
  }

  virtual ~Search_add_document_result() throw() {}


  bool operator == (const Search_add_document_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Search_add_document_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_add_document_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_add_document_presult {
 public:


  virtual ~Search_add_document_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class Search_delete_document_args {
 public:

  Search_delete_document_args() : document_id("") {
  }

  virtual ~Search_delete_document_args() throw() {}

  std::string document_id;

  struct __isset {
    __isset() : document_id(false) {}
    bool document_id;
  } __isset;

  bool operator == (const Search_delete_document_args & rhs) const
  {
    if (!(document_id == rhs.document_id))
      return false;
    return true;
  }
  bool operator != (const Search_delete_document_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_delete_document_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_delete_document_pargs {
 public:


  virtual ~Search_delete_document_pargs() throw() {}

  const std::string* document_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_delete_document_result {
 public:

  Search_delete_document_result() {
  }

  virtual ~Search_delete_document_result() throw() {}


  bool operator == (const Search_delete_document_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Search_delete_document_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_delete_document_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_delete_document_presult {
 public:


  virtual ~Search_delete_document_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class Search_size_args {
 public:

  Search_size_args() {
  }

  virtual ~Search_size_args() throw() {}


  bool operator == (const Search_size_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Search_size_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_size_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_size_pargs {
 public:


  virtual ~Search_size_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_size_result {
 public:

  Search_size_result() : success(0) {
  }

  virtual ~Search_size_result() throw() {}

  int64_t success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const Search_size_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Search_size_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_size_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_size_presult {
 public:


  virtual ~Search_size_presult() throw() {}

  int64_t* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class Search_clear_args {
 public:

  Search_clear_args() {
  }

  virtual ~Search_clear_args() throw() {}


  bool operator == (const Search_clear_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Search_clear_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_clear_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_clear_pargs {
 public:


  virtual ~Search_clear_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_clear_result {
 public:

  Search_clear_result() {
  }

  virtual ~Search_clear_result() throw() {}


  bool operator == (const Search_clear_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Search_clear_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_clear_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_clear_presult {
 public:


  virtual ~Search_clear_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class Search_search_by_document_args {
 public:

  Search_search_by_document_args() : max(0) {
  }

  virtual ~Search_search_by_document_args() throw() {}

  int64_t max;
  std::vector<std::string>  query;

  struct __isset {
    __isset() : max(false), query(false) {}
    bool max;
    bool query;
  } __isset;

  bool operator == (const Search_search_by_document_args & rhs) const
  {
    if (!(max == rhs.max))
      return false;
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const Search_search_by_document_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_search_by_document_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_search_by_document_pargs {
 public:


  virtual ~Search_search_by_document_pargs() throw() {}

  const int64_t* max;
  const std::vector<std::string> * query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_search_by_document_result {
 public:

  Search_search_by_document_result() {
  }

  virtual ~Search_search_by_document_result() throw() {}

  std::vector<SearchResult>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const Search_search_by_document_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Search_search_by_document_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_search_by_document_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_search_by_document_presult {
 public:


  virtual ~Search_search_by_document_presult() throw() {}

  std::vector<SearchResult> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class Search_search_by_feature_args {
 public:

  Search_search_by_feature_args() : max(0) {
  }

  virtual ~Search_search_by_feature_args() throw() {}

  int64_t max;
  std::vector<std::string>  query;

  struct __isset {
    __isset() : max(false), query(false) {}
    bool max;
    bool query;
  } __isset;

  bool operator == (const Search_search_by_feature_args & rhs) const
  {
    if (!(max == rhs.max))
      return false;
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const Search_search_by_feature_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_search_by_feature_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_search_by_feature_pargs {
 public:


  virtual ~Search_search_by_feature_pargs() throw() {}

  const int64_t* max;
  const std::vector<std::string> * query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_search_by_feature_result {
 public:

  Search_search_by_feature_result() {
  }

  virtual ~Search_search_by_feature_result() throw() {}

  std::vector<SearchResult>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const Search_search_by_feature_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Search_search_by_feature_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_search_by_feature_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_search_by_feature_presult {
 public:


  virtual ~Search_search_by_feature_presult() throw() {}

  std::vector<SearchResult> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class Search_save_args {
 public:

  Search_save_args() : filename("") {
  }

  virtual ~Search_save_args() throw() {}

  std::string filename;

  struct __isset {
    __isset() : filename(false) {}
    bool filename;
  } __isset;

  bool operator == (const Search_save_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const Search_save_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_save_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_save_pargs {
 public:


  virtual ~Search_save_pargs() throw() {}

  const std::string* filename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_save_result {
 public:

  Search_save_result() : success(0) {
  }

  virtual ~Search_save_result() throw() {}

  bool success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const Search_save_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Search_save_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_save_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_save_presult {
 public:


  virtual ~Search_save_presult() throw() {}

  bool* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class Search_load_args {
 public:

  Search_load_args() : filename("") {
  }

  virtual ~Search_load_args() throw() {}

  std::string filename;

  struct __isset {
    __isset() : filename(false) {}
    bool filename;
  } __isset;

  bool operator == (const Search_load_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const Search_load_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_load_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_load_pargs {
 public:


  virtual ~Search_load_pargs() throw() {}

  const std::string* filename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_load_result {
 public:

  Search_load_result() : success(0) {
  }

  virtual ~Search_load_result() throw() {}

  bool success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const Search_load_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Search_load_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Search_load_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class Search_load_presult {
 public:


  virtual ~Search_load_presult() throw() {}

  bool* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SearchClient : virtual public SearchIf {
 public:
  SearchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SearchClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void add_document(const std::string& document_id, const std::vector<std::string> & features);
  void send_add_document(const std::string& document_id, const std::vector<std::string> & features);
  void recv_add_document();
  void delete_document(const std::string& document_id);
  void send_delete_document(const std::string& document_id);
  void recv_delete_document();
  int64_t size();
  void send_size();
  int64_t recv_size();
  void clear();
  void send_clear();
  void recv_clear();
  void search_by_document(std::vector<SearchResult> & _return, const int64_t max, const std::vector<std::string> & query);
  void send_search_by_document(const int64_t max, const std::vector<std::string> & query);
  void recv_search_by_document(std::vector<SearchResult> & _return);
  void search_by_feature(std::vector<SearchResult> & _return, const int64_t max, const std::vector<std::string> & query);
  void send_search_by_feature(const int64_t max, const std::vector<std::string> & query);
  void recv_search_by_feature(std::vector<SearchResult> & _return);
  bool save(const std::string& filename);
  void send_save(const std::string& filename);
  bool recv_save();
  bool load(const std::string& filename);
  void send_load(const std::string& filename);
  bool recv_load();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SearchProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<SearchIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (SearchProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*)> processMap_;
  void process_add_document(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_delete_document(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_size(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_clear(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_search_by_document(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_search_by_feature(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_save(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_load(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
 public:
  SearchProcessor(boost::shared_ptr<SearchIf> iface) :
    iface_(iface) {
    processMap_["add_document"] = &SearchProcessor::process_add_document;
    processMap_["delete_document"] = &SearchProcessor::process_delete_document;
    processMap_["size"] = &SearchProcessor::process_size;
    processMap_["clear"] = &SearchProcessor::process_clear;
    processMap_["search_by_document"] = &SearchProcessor::process_search_by_document;
    processMap_["search_by_feature"] = &SearchProcessor::process_search_by_feature;
    processMap_["save"] = &SearchProcessor::process_save;
    processMap_["load"] = &SearchProcessor::process_load;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot);
  virtual ~SearchProcessor() {}
};

class SearchMultiface : virtual public SearchIf {
 public:
  SearchMultiface(std::vector<boost::shared_ptr<SearchIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SearchMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SearchIf> > ifaces_;
  SearchMultiface() {}
  void add(boost::shared_ptr<SearchIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void add_document(const std::string& document_id, const std::vector<std::string> & features) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->add_document(document_id, features);
    }
  }

  void delete_document(const std::string& document_id) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->delete_document(document_id);
    }
  }

  int64_t size() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->size();
      } else {
        ifaces_[i]->size();
      }
    }
  }

  void clear() {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->clear();
    }
  }

  void search_by_document(std::vector<SearchResult> & _return, const int64_t max, const std::vector<std::string> & query) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->search_by_document(_return, max, query);
        return;
      } else {
        ifaces_[i]->search_by_document(_return, max, query);
      }
    }
  }

  void search_by_feature(std::vector<SearchResult> & _return, const int64_t max, const std::vector<std::string> & query) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->search_by_feature(_return, max, query);
        return;
      } else {
        ifaces_[i]->search_by_feature(_return, max, query);
      }
    }
  }

  bool save(const std::string& filename) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->save(filename);
      } else {
        ifaces_[i]->save(filename);
      }
    }
  }

  bool load(const std::string& filename) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->load(filename);
      } else {
        ifaces_[i]->load(filename);
      }
    }
  }

};

}} // namespace

#endif
